package com.speedment.example.eventsourcing.calendar.event.booking_event.generated;

import com.speedment.common.annotation.GeneratedCode;
import com.speedment.example.eventsourcing.calendar.event.booking_event.BookingEvent;
import com.speedment.example.eventsourcing.calendar.event.booking_event.generated.GeneratedBookingEvent.Type;
import com.speedment.runtime.config.Column;
import com.speedment.runtime.config.identifier.ColumnIdentifier;
import com.speedment.runtime.config.identifier.TableIdentifier;
import com.speedment.runtime.core.util.OptionalUtil;
import com.speedment.runtime.field.ByteField;
import com.speedment.runtime.field.ComparableField;
import com.speedment.runtime.field.EnumField;
import com.speedment.runtime.field.LongField;
import com.speedment.runtime.typemapper.TypeMapper.Category;
import com.speedment.runtime.typemapper.TypeMapper;
import com.speedment.runtime.typemapper.other.BinaryToUuidMapper;
import com.speedment.runtime.typemapper.time.TimestampToLocalDateTimeMapper;
import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Optional;
import java.util.UUID;

/**
 * The generated base for the {@link
 * com.speedment.example.eventsourcing.calendar.event.booking_event.BookingEvent}-interface
 * representing entities of the {@code booking}-table in the database.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made to
 * it will be overwritten.
 * 
 * @author Speedment
 */
@GeneratedCode("Speedment")
public interface GeneratedBookingEvent {
    
    /**
     * This Field corresponds to the {@link BookingEvent} field that can be
     * obtained using the {@link BookingEvent#getSeqNo()} method.
     */
    LongField<BookingEvent, Long> SEQ_NO = LongField.create(
        Identifier.SEQ_NO,
        BookingEvent::getSeqNo,
        BookingEvent::setSeqNo,
        TypeMapper.primitive(),
        true
    );
    /**
     * This Field corresponds to the {@link BookingEvent} field that can be
     * obtained using the {@link BookingEvent#getVersion()} method.
     */
    ByteField<BookingEvent, Byte> VERSION = ByteField.create(
        Identifier.VERSION,
        BookingEvent::getVersion,
        BookingEvent::setVersion,
        TypeMapper.primitive(),
        false
    );
    /**
     * This Field corresponds to the {@link BookingEvent} field that can be
     * obtained using the {@link BookingEvent#getType()} method.
     */
    EnumField<BookingEvent, String, Type> TYPE = EnumField.create(
        Identifier.TYPE,
        BookingEvent::getType,
        BookingEvent::setType,
        new TypeMapper<String, Type>() {
            @Override
            public String getLabel() {
                return "String to Type Mapper";
            }
            
            @Override
            public Category getJavaTypeCategory(Column column) {
                return Category.ENUM;
            }
            
            @Override
            public java.lang.reflect.Type getJavaType(Column column) {
                return Type.class;
            }
            
            @Override
            public Type toJavaType(Column column, Class<?> clazz, String value) {
                return value == null ? null : Type.fromDatabase(value);
            }
            
            @Override
            public String toDatabaseType(Type type) {
                return type == null ? null : type.toDatabase();
            }
        },
        Type::toDatabase,
        Type::fromDatabase,
        Type.class
    );
    /**
     * This Field corresponds to the {@link BookingEvent} field that can be
     * obtained using the {@link BookingEvent#getBookingId()} method.
     */
    ComparableField<BookingEvent, Object, UUID> BOOKING_ID = ComparableField.create(
        Identifier.BOOKING_ID,
        BookingEvent::getBookingId,
        BookingEvent::setBookingId,
        new BinaryToUuidMapper(),
        false
    );
    /**
     * This Field corresponds to the {@link BookingEvent} field that can be
     * obtained using the {@link BookingEvent#getUserId()} method.
     */
    ComparableField<BookingEvent, Object, UUID> USER_ID = ComparableField.create(
        Identifier.USER_ID,
        o -> OptionalUtil.unwrap(o.getUserId()),
        BookingEvent::setUserId,
        new BinaryToUuidMapper(),
        false
    );
    /**
     * This Field corresponds to the {@link BookingEvent} field that can be
     * obtained using the {@link BookingEvent#getResourceId()} method.
     */
    ComparableField<BookingEvent, Object, UUID> RESOURCE_ID = ComparableField.create(
        Identifier.RESOURCE_ID,
        o -> OptionalUtil.unwrap(o.getResourceId()),
        BookingEvent::setResourceId,
        new BinaryToUuidMapper(),
        false
    );
    /**
     * This Field corresponds to the {@link BookingEvent} field that can be
     * obtained using the {@link BookingEvent#getBookFrom()} method.
     */
    ComparableField<BookingEvent, Timestamp, LocalDateTime> BOOK_FROM = ComparableField.create(
        Identifier.BOOK_FROM,
        o -> OptionalUtil.unwrap(o.getBookFrom()),
        BookingEvent::setBookFrom,
        new TimestampToLocalDateTimeMapper(),
        false
    );
    /**
     * This Field corresponds to the {@link BookingEvent} field that can be
     * obtained using the {@link BookingEvent#getBookTo()} method.
     */
    ComparableField<BookingEvent, Timestamp, LocalDateTime> BOOK_TO = ComparableField.create(
        Identifier.BOOK_TO,
        o -> OptionalUtil.unwrap(o.getBookTo()),
        BookingEvent::setBookTo,
        new TimestampToLocalDateTimeMapper(),
        false
    );
    
    /**
     * Returns the seqNo of this BookingEvent. The seqNo field corresponds to
     * the database column booking_demo.booking_demo.booking.seqNo.
     * 
     * @return the seqNo of this BookingEvent
     */
    long getSeqNo();
    
    /**
     * Returns the version of this BookingEvent. The version field corresponds
     * to the database column booking_demo.booking_demo.booking.version.
     * 
     * @return the version of this BookingEvent
     */
    byte getVersion();
    
    /**
     * Returns the type of this BookingEvent. The type field corresponds to the
     * database column booking_demo.booking_demo.booking.type.
     * 
     * @return the type of this BookingEvent
     */
    Type getType();
    
    /**
     * Returns the bookingId of this BookingEvent. The bookingId field
     * corresponds to the database column
     * booking_demo.booking_demo.booking.booking_id.
     * 
     * @return the bookingId of this BookingEvent
     */
    UUID getBookingId();
    
    /**
     * Returns the userId of this BookingEvent. The userId field corresponds to
     * the database column booking_demo.booking_demo.booking.user_id.
     * 
     * @return the userId of this BookingEvent
     */
    Optional<UUID> getUserId();
    
    /**
     * Returns the resourceId of this BookingEvent. The resourceId field
     * corresponds to the database column
     * booking_demo.booking_demo.booking.resource_id.
     * 
     * @return the resourceId of this BookingEvent
     */
    Optional<UUID> getResourceId();
    
    /**
     * Returns the bookFrom of this BookingEvent. The bookFrom field corresponds
     * to the database column booking_demo.booking_demo.booking.bookFrom.
     * 
     * @return the bookFrom of this BookingEvent
     */
    Optional<LocalDateTime> getBookFrom();
    
    /**
     * Returns the bookTo of this BookingEvent. The bookTo field corresponds to
     * the database column booking_demo.booking_demo.booking.bookTo.
     * 
     * @return the bookTo of this BookingEvent
     */
    Optional<LocalDateTime> getBookTo();
    
    /**
     * Sets the seqNo of this BookingEvent. The seqNo field corresponds to the
     * database column booking_demo.booking_demo.booking.seqNo.
     * 
     * @param seqNo to set of this BookingEvent
     * @return      this BookingEvent instance
     */
    BookingEvent setSeqNo(long seqNo);
    
    /**
     * Sets the version of this BookingEvent. The version field corresponds to
     * the database column booking_demo.booking_demo.booking.version.
     * 
     * @param version to set of this BookingEvent
     * @return        this BookingEvent instance
     */
    BookingEvent setVersion(byte version);
    
    /**
     * Sets the type of this BookingEvent. The type field corresponds to the
     * database column booking_demo.booking_demo.booking.type.
     * 
     * @param type to set of this BookingEvent
     * @return     this BookingEvent instance
     */
    BookingEvent setType(Type type);
    
    /**
     * Sets the bookingId of this BookingEvent. The bookingId field corresponds
     * to the database column booking_demo.booking_demo.booking.booking_id.
     * 
     * @param bookingId to set of this BookingEvent
     * @return          this BookingEvent instance
     */
    BookingEvent setBookingId(UUID bookingId);
    
    /**
     * Sets the userId of this BookingEvent. The userId field corresponds to the
     * database column booking_demo.booking_demo.booking.user_id.
     * 
     * @param userId to set of this BookingEvent
     * @return       this BookingEvent instance
     */
    BookingEvent setUserId(UUID userId);
    
    /**
     * Sets the resourceId of this BookingEvent. The resourceId field
     * corresponds to the database column
     * booking_demo.booking_demo.booking.resource_id.
     * 
     * @param resourceId to set of this BookingEvent
     * @return           this BookingEvent instance
     */
    BookingEvent setResourceId(UUID resourceId);
    
    /**
     * Sets the bookFrom of this BookingEvent. The bookFrom field corresponds to
     * the database column booking_demo.booking_demo.booking.bookFrom.
     * 
     * @param bookFrom to set of this BookingEvent
     * @return         this BookingEvent instance
     */
    BookingEvent setBookFrom(LocalDateTime bookFrom);
    
    /**
     * Sets the bookTo of this BookingEvent. The bookTo field corresponds to the
     * database column booking_demo.booking_demo.booking.bookTo.
     * 
     * @param bookTo to set of this BookingEvent
     * @return       this BookingEvent instance
     */
    BookingEvent setBookTo(LocalDateTime bookTo);
    
    enum Identifier implements ColumnIdentifier<BookingEvent> {
        
        SEQ_NO      ("seqNo"),
        VERSION     ("version"),
        TYPE        ("type"),
        BOOKING_ID  ("booking_id"),
        USER_ID     ("user_id"),
        RESOURCE_ID ("resource_id"),
        BOOK_FROM   ("bookFrom"),
        BOOK_TO     ("bookTo");
        
        private final String columnName;
        private final TableIdentifier<BookingEvent> tableIdentifier;
        
        Identifier(String columnName) {
            this.columnName      = columnName;
            this.tableIdentifier = TableIdentifier.of(    getDbmsName(), 
                getSchemaName(), 
                getTableName());
        }
        
        @Override
        public String getDbmsName() {
            return "booking_demo";
        }
        
        @Override
        public String getSchemaName() {
            return "booking_demo";
        }
        
        @Override
        public String getTableName() {
            return "booking";
        }
        
        @Override
        public String getColumnName() {
            return this.columnName;
        }
        
        @Override
        public TableIdentifier<BookingEvent> asTableIdentifier() {
            return this.tableIdentifier;
        }
    }
    
    enum Type {
        
        CANCEL_BOOKING ("CANCEL_BOOKING", 0),
        CREATE_BOOKING ("CREATE_BOOKING", 1),
        UPDATE_BOOKING ("UPDATE_BOOKING", 2);
        
        private final String databaseName;
        private final int databaseOrdinal;
        
        Type(String databaseName, int databaseOrdinal) {
            this.databaseName    = databaseName;
            this.databaseOrdinal = databaseOrdinal;
        }
        
        public static Type fromDatabase(String databaseName) {
            if (databaseName == null) return null;
            switch (databaseName) {
                case "CANCEL_BOOKING" : return CANCEL_BOOKING;
                case "CREATE_BOOKING" : return CREATE_BOOKING;
                case "UPDATE_BOOKING" : return UPDATE_BOOKING;
                default : throw new UnsupportedOperationException(
                    "Unknown enum constant '" + databaseName + "'."
                );
            }
        }
        
        public static Type fromDatabaseOrdinal(Integer databaseOrdinal) {
            if (databaseOrdinal == null) return null;
            switch (databaseOrdinal) {
                case 0 : return CANCEL_BOOKING;
                case 1 : return CREATE_BOOKING;
                case 2 : return UPDATE_BOOKING;
                default : throw new UnsupportedOperationException(
                    "Unknown enum ordinal '" + databaseOrdinal + "'."
                );
            }
        }
        
        public String toDatabase() {
            return databaseName;
        }
        
        public int toDatabaseOrdinal() {
            return databaseOrdinal;
        }
    }
}